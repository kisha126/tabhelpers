% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/table-default.R
\name{table_default}
\alias{table_default}
\alias{table_default.default}
\title{Display a table in the command line with customizable formatting.}
\usage{
table_default(x, ...)

\method{table_default}{default}(
  x,
  justify_cols = "center",
  digits = 3,
  digits_by_col = NULL,
  scientific = FALSE,
  na_print = "",
  min_width = NULL,
  border_char = options("tab_default")$tab_default$border_char,
  show_row_names = FALSE,
  center_table = FALSE,
  n_space = 2,
  style_colnames = NULL,
  style_columns = NULL,
  nrows = getOption("tab_default")$nrows,
  vb = list()
)
}
\arguments{
\item{x}{A data frame or tibble to display.}

\item{...}{Additional arguments passed to specific methods.}

\item{justify_cols}{Controls column text alignment. Can be:
\itemize{
\item A single string ("left", "right", "center") to apply to all columns
\item A vector of strings to apply to columns by position
\item A named list (e.g., \code{list("1" = "left", "mpg" = "right")}) for specific columns
}}

\item{digits}{Number of digits to round numeric columns to. Default is \code{3}.}

\item{digits_by_col}{Named list specifying the number of digits for specific columns. Default is \code{NULL}.}

\item{scientific}{Logical. If \code{TRUE}, numeric values are displayed in scientific notation. Default is \code{FALSE}.}

\item{na_print}{Character string to represent missing values. Default is an empty string \code{""}.}

\item{min_width}{Minimum column width. Default is \code{NULL}.}

\item{border_char}{Character used for borders. Default is \code{"─"}.}

\item{show_row_names}{Logical. If \code{TRUE}, row names are displayed. Default is \code{FALSE}.}

\item{center_table}{Logical. If \code{TRUE}, the table is centered in the terminal. Default is \code{FALSE}.}

\item{n_space}{Number of spaces between columns. Default is \code{2}.}

\item{style_colnames}{Styling for column headers. Can be:
\itemize{
\item A character vector or list specifying cli color/style functions
(e.g., \code{list("mpg" = "red", "cyl" = "blue_bold")})
\item A list of lambda functions that take a context object and return a styled string
(e.g., \code{list("mpg" = function(ctx) { cli::col_red(ctx$formatted_value) })})
}}

\item{style_columns}{Styling for data cells. Can be:
\itemize{
\item A character vector or list specifying cli color/style functions
(e.g., \code{list("mpg" = "green", "cyl" = "cyan")})
\item A list of lambda functions that take a context object and return a styled string
(e.g., \code{list("mpg" = function(ctx) { if(as.numeric(ctx$value) > 20) cli::col_green(ctx$formatted_value) else cli::col_red(ctx$formatted_value) })})
}

Hidden Feature: This parameter can be used to mutate the existing column, as well.}

\item{vb}{Default is an empty list. Stands for "vertical border" to draw a vertical in a specific position.
Should be a list that contains the following:
\itemize{
\item \code{char}: To provide a specific character to iteratively draw a vertical border. The \code{"│"} character is recommended.
\item \code{after}: The position of the vertical border AFTER that column. Should be a vector of integers.
}

This feature is recommended in presenting a statistical result like the coefficient table in Linear Regression.}

\item{pos}{Logical. If \code{TRUE}, positive numbers are prefixed with a plus sign. Default is \code{FALSE}.}

\item{nrow}{Number of rows to display. Tables with more rows will be truncated with informative messages.
Default is the value set in \code{options("tab_default")$nrows}, which is typically \code{10}.}
}
\description{
This function takes a x frame or tibble and displays it in the command line with various formatting options.
The table can be customized in terms of alignment, number formatting, column width, and more.
}
\section{Methods (by class)}{
\itemize{
\item \code{table_default(default)}: Default method for displaying tables.

}}
\examples{
# Basic usage
table_default(head(mtcars))

# Justify columns differently
table_default(head(mtcars), justify_cols = list("mpg" = "left", "cyl" = "right", "disp" = "center"))

# Apply styling to column names
table_default(head(mtcars), style_colnames = list("mpg" = "red", "cyl" = "blue", "disp" = "green"))

# Apply styling to data columns
table_default(head(mtcars), style_columns = list("mpg" = "cyan", "cyl" = "magenta"))

# Using lambda functions for conditional styling
table_default(head(mtcars),
              style_columns = list(
                "mpg" = function(ctx) {
                  if(as.numeric(ctx$value) > 20) {
                    cli::col_green(ctx$formatted_value)
                  } else {
                    cli::col_red(ctx$formatted_value)
                  }
                },
                "cyl" = function(ctx) {
                  if(as.numeric(ctx$value) == 4) {
                    cli::style_italic(cli::col_blue(ctx$formatted_value))
                  } else {
                    ctx$formatted_value
                  }
                }
              ))

# Set the number of rows to display
table_default(mtcars, nrow = 15)

# Change the global default for number of rows
tabhelpers_options("nrows", 20)
table_default(mtcars)  # Will show up to 20 rows

# Comprehensive example with lambda functions
table_default(head(mtcars),
              justify_cols = list("mpg" = "left", "cyl" = "right"),
              style_colnames = list(
                "mpg" = function(ctx) cli::col_red(cli::style_bold(ctx$formatted_value)),
                "cyl" = "blue_italic"
              ),
              style_columns = list(
                "mpg" = function(ctx) {
                  val <- as.numeric(ctx$value)
                  if(val > 20) cli::col_green(ctx$formatted_value)
                  else if(val > 15) cli::col_yellow(ctx$formatted_value)
                  else cli::col_red(ctx$formatted_value)
                }
              ),
              digits = 1,
              border_char = "=",
              center_table = TRUE)

# With vertical line
mtcars |>
    tibble::rownames_to_column(var = "Car Names") |>
    head(5) |>
    table_default(
        justify_cols = list("1" = "right", "mpg"="right"),
        digits = 1,
        center_table = TRUE,
        n_space = 2,
        style_columns = list(
            "mpg" = function(ctx) {
                val <- as.numeric(ctx$value)
                if(val > 20) cli::col_green(ctx$formatted_value)
                else if(val > 15) cli::col_yellow(ctx$formatted_value)
                else cli::col_red(ctx$formatted_value)
            }
        ),
        vb = list(char = "│", after = c(1, 10, 2))
    )

# Displaying Linear Regression output
mtcars |>
    lm(formula = mpg ~ wt + disp + hp) |>
    broom::tidy() |>
    table_default(
        justify_cols = list("term" = "right"),
        style_columns = list(
            p.value = function(ctx) {
                val <- as.numeric(ctx$formatted_value)
                if (val < 0.05 & val >= 0.001) {
                    cli::col_red(val)
                } else if (val < 0.001) {
                    rep_txt <- replace(val, val < 0.001, "<0.001")
                    cli::style_bold(rep_txt)
                } else {
                    cli::style_italic(val)
                }

            }
        ),
        vb = list(
            char = "│", after = 1
        ),
        n_space = 3,
        center_table = TRUE
    )

## Extend it with functional programming
library(dplyr)

print_table = function(x) {
    groups = unique(x[[1]])
    groups = sort(groups)

    for (i in seq_along(groups)) {
        group_value = groups[i]
        group_data = x[x[[1]] == group_value, -1]

        col_name = toupper(substr(names(x)[1], 1, 1))
        col_name = paste0(col_name, substr(names(x)[1], 2, nchar(names(x)[1])))

        cat(glue::glue("{i}. {col_name} = {group_value}"), "\n\n")

        tabhelpers::table_default(
            group_data,
            justify_cols = list("term" = "left"),
            center_table = T,
            style_columns = list(
                p.value = function(ctx) {
                    val <- as.numeric(ctx$formatted_value)
                    if (val < 0.05 & val >= 0.001) {
                        cli::col_red(val)
                    } else if (val < 0.001) {
                        rep_txt <- replace(val, val < 0.001, "<0.001")
                        cli::style_bold(rep_txt)
                    } else {
                        cli::style_italic(val)
                    }

                }
            ),
            vb = list(
                char = "│", after = 1
            )
        )

        cat("\n")
    }

    invisible(x)
}

mtcars |>
    group_by(cyl) |>
    summarise(
        lm_model = list({
            model <- lm(mpg ~ wt)
            broom::tidy(model)
        })
    ) |>
    tidyr::unnest(lm_model) |>
    print_table()

}
